# This is Aram Haddad Solution for the body part of the webpage
# it is made for the website I created.
# This solution does not include the footnotes, or head of the page.
#The user can add any number of Stages, every Stage includes as many number of chapters as he requires.
#Each Chapter has Three Sections, Section one always include an image.
#this is an example from my HTML, it can be modified. stageExample[[['chapter title'],['section1_text','section2_text','section3_text','immage_name']], .... ]


stage1_chapters = [[['The Basics of the Web and HTML'],['<p>The Web is made of HTML pages connected by URLs.</P><p>HTML: HyperText markup language.<br>Text content: what you see.<br>Markup: what it looks like.<br>Reference to other documents: eg images or videos.</P>' , '<p>A TAG is contained in angled brackets, and in HTML we have an opening TAG and a closing TAG.</P><p>A void TAG is a TAG that does not require a closing TAG.</P><p>An Element is the opening and closing TAGs and the content between them.</P><p>Attributes are Tags that include some "value" or reference to a website or an image or etc.</P><p>Container elements: elements that do nothing but contain stuff inside of them.</P>','Computers are Stupid, you need to tell them exactly what to do. and they cant figure out for themselves what you mean or want except if you explain it exactly with no typos or errors.', 'TheWeb.Gif']],
                   [['Creating a Structured Document with HTML'],['<p>HTML and CSS develop and change over time, but the underlying principles always remain the same.</p><p>We can think of an HTML file like we think of a house:</P><p>- HTML is the structure of the house like where the walls are placed, the rooms, kitchen.. Etc.<br>- CSS is the style of the house like the decoration, the colors of the walls.. Etc.<br>- JAVAScript attached are the interactive components, like the garage door opener, the remote control.. Etc.</P>','<p>DOM: Document Object Model. a tree like structure.</p><p>The browser builds a Tree like structure of the page. And the Tree means a branching structure.</P><p>Sideway triangles are an html element, each has an open and closing tag, and it can include a text or another element/branch.</p><p>To mark the box so you can remember what its for, and to add style is to give each element a class attribute. A box can also belong to multiple classes.</P>','Boxifying: dividing/cutting the webpage into boxes within boxes. This is how the browser sees HTML.','TheHouse.Gif']],
                   [['Adding CSS Style to HTML Structure'],['<p>The HTML document starts with !DOCTYPE HTML to tell the browser that this is an HTML document.</p><p>Then the HTML starts with html and ends with /html.</p><p>After the HTML TAG we add the head /head Tag.</p><p>Inside the head Tag we add the link to the CSS file.</p><p>After the head Tag we add the body /body Tag.</p>','<p>The Concept of Cascading: Rules are applied not only to the elements they directly match, but also their child elements, except if the child element has its own rule.</p><p>The Concept of Inheritance: Mechanism by which properties are applied not only to specific element but also to its descendants, inheritance relies on the document tree/hierarchy. Only text related properties are inherited, Box related properties are not inherited.</p><p>The Box Model: Margin; Border; Padding; Content.</p>','<p>It is very important in computer programming not to  REPEAT YOURSELF - Avoid repetition.</p><p><b>CSS</b> assist programmers to avoid repetition.</p><p>Repeated codes are very hard to maintain.</p><p>Writing your style inline with your HTML is not a very good idea because it leads to a lot of repeated codes and you will need to modify the code in every individual element if you decided to make a change or fix an error.</p>','HTML.Gif']]]

stage2_chapters = [[['Introduction to "Serious" Programming'],['<p>Computer Science is about how to solve problems by breaking them into smaller pieces, and mechanically describing a sequence of steps that you can use to solve each peace, and those steps can be executed by a computer.</P><p>Programming is the Core of Computer Science.<br>A program needs to be a very precise sequence of steps.</P>','<p>Python does something called an interpreter, which means it runs our programs, it interprets them, and execute them in a language that a computer can understand.</P><p>We cant use natural languages to write computer programs from the following reasons:<br>- Ambiguity<br>- Verbosity</P><p>Backus-Naur Form: non-terminal -> replacement</P><p>Python Grammar for Arithmetic Expressions:<br>- Expressing is something that has a value.<br>- We can combine tow expressions by using an operator: Expression --> Expression operator Expression.<br>- Expression can be a number.</P><p>Cycle: the time a computer needs to do one step.</P>','The trick to dealing with programming mistakes (called "bugs") is not to avoid making them entirely. That is impossible. The trick is to develop a system for finding and fixing them.','ComputerScience.Gif']],
                   [['Variables and Strings'],['<p>String is a sequence of characters surrounded by quotes.</p><p>Variables give programmers a way to give names to values.</P><p>Assignment Statement: Name = Expression. Name here is the variable we are defining.</P><p>Parameters are what go inside the parentheses.</p>','<p>The operator "+" with numbers gives the total, but with strings it gives the concatenation of the two strings.</p><p>The operator "*" with numbers multiplies and gives the total, but with strings it repeats the string multiple times.</P><p>Indexing Strings: string [ expression ].<br>Selecting Sub-Sequence of the string: string[expression:expression].</p><p>Find Operation "method" which is a build in procedure defined by Python: string.find(string).<br>The output of find is the position of the first occurrence of the target string, if it is not found, the output will be -1.</P>','We can find other occurrences of the target string by adding a number to the find operation: string.find(string,number) it will look for the first occurrence of the target string after the given position.','Variables.Gif']],
                   [['Input -- "Function" -- Output'],[ '<p><br> A "function" is something that takes input does something to  that input and then produces output.</p>','<p>Functions are made by starting a line of code with the keyword def  and then define a function name followed by the function parameters. ', '<p>We can use triple quotes triple quotes to create multi line strings in Python.</p>','"Function.Gif"']],
                   [['Decisions and Repetition: If and While'],['<p><br>Python provides lots of different operators for doing comparisons: less than  , greater than , les or equal to , etc</p><p>The output of a comparison is a Boolean value which is either True or False.</p><p>In order to have the code make decisions and make something different, we use the If statement.</p><p>The block is the code that will run when the test expression is True.</p><p>While Loops: while TestExpression: block<p>Infinite loops: loops that never stops, oftentimes, when software hangs and gets stuck doing something there is a mistake that a programmer made and we call it a bug, it got stuck in an infinite loop.</p><p>Break Statement: it gives us a way to stop the loop even while the test expression is True.</p>','<p>Using OR operation:<br>Ture or False --- True.<br>False or True --- True.<br>Ture or True --- True.<br>False or False --- False.<br>True or "any thing" --- True.<br>False or "any thing" --- Error.</p><p>Modular code, the "data" is separated from its visual presentation so you can change one without worrying about the other.<br>Doing this will require:<br> Breaking a big task into smaller pieces.<br> Using functions that you (or others) have already written.<br> Writing new functions to solve pieces of the bigger problem.<br> Putting the "pieces" together to solve the bigger problem.<br></p>','<p>In programming, its not always enough that what you make works.</p><p>For comparison we use double equal sine because the single equal sign means assignment.</p><p>Using OR: If the first expression evaluates to True, the value is True, and the second expression is not evaluated.</p>','TheLoop.Gif']],
                   [['Structured Data: Lists and For Loops'],['<p>A list is a sequence of anything, they could be numbers, they could be characters, they could be strings, and they could be also other lists.</p><p>Mutation means we can change the value of a list after we have created it.</p><p>Aliasing is when we have two different ways to refer to the same object.</p>','<p>With lists, we can use square brackets to access the elements of the list.</p><p>Some list operations:<br>- Append, append is a method list.append(element), it will add new elements to our list.<br>- + Plus, it works like append but it will create a new list.<br>- Len(list) gives us the length of a list, in the case of strings, let gives us the number of characters in the string.</p><p>loops on lists: for name in list: Block</p><p>We can use list.index(value) to find the position of a value in a list, if the value is not in the list it will produce an error.<br>We can use value in list to find the position of a value in a list, and the result is True  if the value is not found is False.<br>We can also use value not in list also.</p>','<p>Strings are not Mutable, and there is no way to change the value of a string.</p>','Lists.Gif']]]

stage1 = [['****** Stage 1: Make your Own Webpage ******'], stage1_chapters]
stage2 = [['****** Stage 2: Automate Your Page ******'], stage2_chapters]
AramWeb_Stages = [stage1, stage2]

def make_section(section, section_number, immage):
    i = section_number + 1
    if section_number == 0:
       return '''
        <div class="Section''' + `i` + '">' + '''
             <div>''' + '''
             ''' + section + '''
             </div>''' + '''
             <div>''' + '''
            <p><img class="image" src="''' + immage + '" alt="this is an image" style="re"></p>' + '''
            </div>''' + '''
        </div>'''
    return '''
        <div class="Section''' + `i` + '">' + '''
             <div>''' + '''
             ''' + section + '''
             </div>''' + '''
        </div>'''

def make_chapter(chapter):
    concept_chapter= '''
     <div class="chapter">
            <h2 class="chapter_Title">Notes on: ''' + chapter[0][0] + '</h2>'
    sections = chapter[1]
    sec = 0;
    while sec < 3:
       concept_chapter = concept_chapter + make_section(sections[sec], sec, sections[3])
       sec = sec + 1
    return concept_chapter + '''
     </div>'''


def make_stage(stage):
    concept_stage='''
<div class="stage_Notes">
            <h2 class="stage_Title">''' + stage[0][0] + '</h2>'
    chapters = stage[1];
    for chapter_number in chapters:
        concept_stage = concept_stage + make_chapter(chapter_number)
    return concept_stage + '''
</div>'''

def make_body_for_many_Stages(stages):
	body=''
	for stage_number in stages:
		body = body + make_stage(stage_number)
	return body

print make_body_for_many_Stages(AramWeb_Stages)